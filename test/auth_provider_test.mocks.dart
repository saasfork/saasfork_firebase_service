// Mocks generated by Mockito 5.4.5 from annotations
// in saasfork_firebase_service/test/auth_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:saasfork_core/saasfork_core.dart' as _i2;
import 'package:saasfork_firebase_service/services/auth_service_interface.dart'
    as _i3;
import 'package:saasfork_firebase_service/services/firebase_auth_service.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUserModel_0 extends _i1.SmartFake implements _i2.UserModel {
  _FakeUserModel_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUserClaims_1 extends _i1.SmartFake implements _i2.UserClaims {
  _FakeUserClaims_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AuthServiceInterface].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthServiceInterface extends _i1.Mock
    implements _i3.AuthServiceInterface {
  MockAuthServiceInterface() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i2.UserModel?> authStateChanges() =>
      (super.noSuchMethod(
            Invocation.method(#authStateChanges, []),
            returnValue: _i4.Stream<_i2.UserModel?>.empty(),
          )
          as _i4.Stream<_i2.UserModel?>);

  @override
  _i4.Future<_i2.UserModel> signInWithEmailAndPassword(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithEmailAndPassword, [email, password]),
            returnValue: _i4.Future<_i2.UserModel>.value(
              _FakeUserModel_0(
                this,
                Invocation.method(#signInWithEmailAndPassword, [
                  email,
                  password,
                ]),
              ),
            ),
          )
          as _i4.Future<_i2.UserModel>);

  @override
  _i4.Future<_i2.UserModel> createUserWithEmailAndPassword(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createUserWithEmailAndPassword, [
              email,
              password,
            ]),
            returnValue: _i4.Future<_i2.UserModel>.value(
              _FakeUserModel_0(
                this,
                Invocation.method(#createUserWithEmailAndPassword, [
                  email,
                  password,
                ]),
              ),
            ),
          )
          as _i4.Future<_i2.UserModel>);

  @override
  _i4.Future<_i2.UserModel> updateUserProfile({
    String? username,
    String? email,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#updateUserProfile, [], {
              #username: username,
              #email: email,
            }),
            returnValue: _i4.Future<_i2.UserModel>.value(
              _FakeUserModel_0(
                this,
                Invocation.method(#updateUserProfile, [], {
                  #username: username,
                  #email: email,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.UserModel>);

  @override
  _i4.Future<void> sendPasswordResetEmail({required String? email}) =>
      (super.noSuchMethod(
            Invocation.method(#sendPasswordResetEmail, [], {#email: email}),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> signOut() =>
      (super.noSuchMethod(
            Invocation.method(#signOut, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteAccount() =>
      (super.noSuchMethod(
            Invocation.method(#deleteAccount, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [FirebaseAuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseAuthService extends _i1.Mock
    implements _i5.FirebaseAuthService {
  MockFirebaseAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i2.UserModel?> authStateChanges() =>
      (super.noSuchMethod(
            Invocation.method(#authStateChanges, []),
            returnValue: _i4.Stream<_i2.UserModel?>.empty(),
          )
          as _i4.Stream<_i2.UserModel?>);

  @override
  _i4.Future<_i2.UserModel> signInWithEmailAndPassword(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithEmailAndPassword, [email, password]),
            returnValue: _i4.Future<_i2.UserModel>.value(
              _FakeUserModel_0(
                this,
                Invocation.method(#signInWithEmailAndPassword, [
                  email,
                  password,
                ]),
              ),
            ),
          )
          as _i4.Future<_i2.UserModel>);

  @override
  _i4.Future<_i2.UserModel> createUserWithEmailAndPassword(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createUserWithEmailAndPassword, [
              email,
              password,
            ]),
            returnValue: _i4.Future<_i2.UserModel>.value(
              _FakeUserModel_0(
                this,
                Invocation.method(#createUserWithEmailAndPassword, [
                  email,
                  password,
                ]),
              ),
            ),
          )
          as _i4.Future<_i2.UserModel>);

  @override
  _i4.Future<void> sendPasswordResetEmail({required String? email}) =>
      (super.noSuchMethod(
            Invocation.method(#sendPasswordResetEmail, [], {#email: email}),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> signOut() =>
      (super.noSuchMethod(
            Invocation.method(#signOut, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteAccount() =>
      (super.noSuchMethod(
            Invocation.method(#deleteAccount, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i2.UserClaims> getUserClaims() =>
      (super.noSuchMethod(
            Invocation.method(#getUserClaims, []),
            returnValue: _i4.Future<_i2.UserClaims>.value(
              _FakeUserClaims_1(this, Invocation.method(#getUserClaims, [])),
            ),
          )
          as _i4.Future<_i2.UserClaims>);

  @override
  _i4.Future<_i2.UserModel> updateUserProfile({
    String? username,
    String? email,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#updateUserProfile, [], {
              #username: username,
              #email: email,
            }),
            returnValue: _i4.Future<_i2.UserModel>.value(
              _FakeUserModel_0(
                this,
                Invocation.method(#updateUserProfile, [], {
                  #username: username,
                  #email: email,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.UserModel>);

  @override
  _i4.Future<void> initializeUserClaims(
    String? uid,
    Map<String, dynamic>? claims,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#initializeUserClaims, [uid, claims]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
